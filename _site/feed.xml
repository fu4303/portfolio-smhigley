<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sarah Higley</title>
	<subtitle></subtitle>
	<link href="https://sarahmhigley.com/feed.xml" rel="self"/>
	<link href="https://sarahmhigley.com/"/>
	<updated>2020-04-12T17:00:00-07:00</updated>
	<id>https://sarahmhigley.com</id>
	<author>
    <name>Sarah Higley</name>
	</author>
	
  
  <entry>
    <title>Tooltips in the time of WCAG 2.1</title>
    <link href="https://sarahmhigley.com/writing/tooltips-in-wcag-21/"/>
    <updated>2019-08-16T17:00:00-07:00</updated>
    <id>https://sarahmhigley.com/writing/tooltips-in-wcag-21/</id>
    <content type="html"><![CDATA[
      <p>TL;DR recommendation: Narrow down your definition of &quot;tooltip,&quot; and jump to <a href="#best-practices-summary">the last section</a>.</p>
<p>Tooltips have been a reliable source of web accessibility woes from the very beginning; or at least from the beginning of graphical web browsers. They have gone by many names: &quot;tooltip,&quot; &quot;infotip,&quot; &quot;toggle tip,&quot; &quot;hint text,&quot; &quot;balloon help,&quot; &quot;info bubble,&quot; &quot;inaccessible overlay of shame&quot;... the list goes on. No matter the name, the same core issues just keep popping up:</p>
<ul>
<li>How do keyboard users access the content?</li>
<li>How do non-mouse pointers (e.g. touchscreens and eye trackers) access the content?</li>
<li>How do blind and low vision users even know the tooltip is there, let alone read it?</li>
<li>If (Internet Lords forbid) there is interactive content inside, how does one access it without accidentally dismissing the tooltip?</li>
<li>How does a user with magnification software move their field of view to read the tooltip without accidentally dismissing it?</li>
</ul>
<h2 id="so-why-do-tooltips-have-so-many-problems%3F">So why do tooltips have so many problems?</h2>
<p>The first hint of a graphical tooltip on the web came in an <a href="https://www.w3.org/MarkUp/draft-ietf-iiir-html-01.txt">early draft of HTML</a> when &quot;title&quot; appeared as an optional attribute on links with the following note:</p>
<blockquote>
<p>The browser software may chose to display the title of the document as a preliminary to retrieving it, for example as a margin note or on a small box while the mouse is over the anchor, or during document fetch.</p>
</blockquote>
<p>At the time that spec was written, graphical <a href="https://en.wikipedia.org/wiki/OutSpoken">screen readers had already existed for over four years</a>. Now, 26 years in the future, we're doing a little bit better. The same inaccessible mouse-based <code>title</code> behavior exists, but at least the <a href="https://html.spec.whatwg.org/multipage/dom.html#the-title-attribute">latest version of the HTML spec</a> explicitly calls out the accessibility problems while warning against using it. Also, <a href="https://www.w3.org/TR/WCAG21/">WCAG</a> is a thing now. But back in the earlier days of the web, it was open season on defining experiences solely for sighted mouse users.</p>
<p>The <a href="http://1997.webhistory.org/www.lists/www-talk.1993q1/0182.html">image tag was first proposed</a> by a browser representative (from Mosaic, since this happened in 1993) as <a href="https://thehistoryoftheweb.com/the-origin-of-the-img-tag/">more of an advance notice than a suggestion</a>. Although the alt attribute was included in the <code>img</code> specification from the very start, <a href="http://jkorpela.fi/html/alt.html#old">practical support was slow</a> and for years screen readers and text-only browsers had no good way of communicating a graphic.</p>
<p>If the history of the image tag seems like an odd digression for an article about tooltips, the reason lies in what happened next: browsers began to actually implement the alt attribute, but they chose to <a href="http://jkorpela.fi/html/altshow.html#tooltip">visually display it as a tooltip</a>, just like the <code>title</code> attribute on links. Although <code>alt</code> still functioned as a text alternative, the tooltip implementation changed how website authors wrote alt text content. There are articles written about the <a href="http://jkorpela.fi/html/alt.html#tooltip">harmful effect of the tooltip treatment</a> as well a <a href="http://www.alanflavell.org.uk//alt/alt-text.html#howlers">compilation of hilarious examples</a> of real live alt text from that time (imagine image after image with the alt text &quot;Click here!&quot;).</p>
<p>Although alt text no longer gets the tooltip treatment in any modern browser, looking back at that era illustrates a deeper issue with the design itself. From the very beginning, the behavior of a native tooltip has made it easy to create content solely for mouse users with good vision while forgetting about everyone else. The alt text tooltip directly demonstrated how easily that type of design can degrade the experience for anyone relying on non-mouse-based interaction or assistive tech. Continuing problems caused by the title attribute's non-inclusive tooltip have also been thoroughly documented (try this wonderfully comprehensive <a href="https://www.24a11y.com/2017/the-trials-and-tribulations-of-the-title-attribute/">24a11y article by Scott O'Hara</a> for a start).</p>
<h2 id="beyond-the-title-attribute%3A-what-are-tooltips-now%3F">Beyond the title attribute: what are tooltips now?</h2>
<p>Usually &quot;use native controls&quot; is the mantra of accessibility professionals, so if the native tooltip is flawed all the way down to its very design, where does that leave designers and developers? The short answer is out in the rain without a popup (or &quot;umbrella&quot; for those who live in the real world) for shelter.</p>
<p>Before diving into the details of how to implement a custom tooltip, let's take a moment to define what a tooltip really <em>is</em>. Conventionally, the term has referred to a purely visual treatment: text that appears in a small overlay on demand, usually when hovering over the thing it describes. This presents a problem when trying to create a specification for a consistent, accessible experience, since visual patterns do not always have a one-to-one relationship with interaction patterns.</p>
<p><em>(Wait. What?)</em></p>
<p>A major pitfall of approaching web design as a visual medium is conflating <em>visual</em> patterns with <em>functional</em> or <em>interaction</em> patterns. One classic example of this is that the word &quot;menu&quot; in web UI has acquired both a broad, generic meaning as well as a specific and technical one. In what passes for casual conversation among web professionals, the word &quot;menu&quot; might refer to a set of links used as site navigation, the file/edit/etc. bar of actions along the top of most applications, or a list of appetizers printed on paper at a restaurant.</p>
<p>Leaving off that last one, keyboard and assistive tech users expect a navigation menu and traditional application menu to function differently: a navigation menu is a list of links that is tabbed through, and an application menu is a collection of menu actions that are reached by arrow keys and often shortcuts. One visual pattern, multiple interaction patterns. To go further down that particular rabbit hole, try this shot: <a href="https://inclusive-components.design/menus-menu-buttons/">inclusive-components.design/menus-menu-buttons</a> followed by this chaser: <a href="https://github.com/w3c/aria-practices/issues/353">github.com/w3c/aria-practices/issues/353</a>.</p>
<p><em>(Back to tooltips)</em></p>
<p>Much like &quot;menu,&quot; the word &quot;tooltip&quot; has come to mean nearly any small, non-modal overlay. While the most traditional use is to provide simple hint text for UI controls (tips for tools, after all), the same visual pattern could be used to display a text alternative for an icon button, a form error message, rich text content (e.g. bold text or a list), or even interactive content. Although all of these use cases could share the same base implementation if visual presentation and mouse interaction were all that mattered, the differences are important for accessibility for the following reasons (in order):</p>
<ol>
<li>Hint text is purely supplemental, and should not override the existing accessible name for a control.</li>
<li>The text alternative for an icon button is its accessible name, and should be associated with the button accordingly.</li>
<li>Rich text formatting can not be conveyed through the usual means of associating hint text with a control (namely <code>aria-describedby</code>).</li>
<li>Interactive content within a popup introduces a whole new set of requirements. It must be easily discoverable by screen readers, follow a logical tab order, be easy to access without dismissing the tooltip and without relying on fine motor control.</li>
</ol>
<p>There is no single DOM structure or javascript implementation that could fill all the requirements of even the few use cases mentioned here, so for the purposes of arriving at some sort of concrete recommendation, popups with rich or interactive content are not considered tooltips. Those patterns would benefit from using a <a href="https://www.w3.org/TR/wai-aria-practices-1.1/#disclosure">disclosure button pattern</a> under the hood. Similarly, a tooltip-style popup that is not tied to an existing interactive control would also benefit from the disclosure pattern. This would prevent it from spawning a useless button purely for the purpose of introducing a tab stop for keyboard access.</p>
<p>With those out of the way, let's take a stab at writing a visually-agnostic spec for a tooltip. The rest of the article, particularly the accessibility recommendations, will assume that a tooltip fits the following definition:</p>
<blockquote>
<p>A &quot;tooltip&quot; is a non-<a href="https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal">modal</a> (or non-blocking) overlay containing text-only content that provides supplemental information about an existing UI control. It is hidden by default, and becomes available on hover or focus of the control it describes.</p>
</blockquote>
<p>That definition could even be narrowed down even further by saying tooltips must provide only descriptive text -- essentially defining it as a custom, accessible version of the title attribute -- but all of the same interaction requirements apply whether the tooltip is used to display a name, description, or error message even if the semantics differ slightly.</p>
<h2 id="the-accessibility-requirements-of-tooltips">The accessibility requirements of tooltips</h2>
<p>Tooltips must be discoverable and readable with a mouse, other pointer devices, keyboard, screen reader, zoom software, and any other assistive technology. They should provide relevant information that may be helpful to learn the UI, but is not required to operate it. Tooltips also should not block a user from performing any other task on the screen.</p>
<p>Not so complicated, right? Let's dive into some of the specifics, broken down into semantics, interaction, and content.</p>
<h3 id="semantics">Semantics</h3>
<p>Meaningful semantics form the backbone of good HTML structure, and help screen readers and other assistive tech provide so many helpful shortcuts for moving around an interface. Headings are headings, links are links, accordions let you know if they are expanded or collapsed, and tooltips are... what exactly?</p>
<p>As described in detail earlier, tooltips can be used for a number of purposes. Even in our stripped-down definition, they could function as a name or a description, and the semantics would be different for each. The trick is to first decide what purpose the tooltip text has, and then assign semantics accordingly.</p>
<h4>Descriptive tooltip semantics</h4>
<p>For the most canonical tooltip purpose -- hint text -- the only two semantic additions are:</p>
<ol>
<li>associate the tooltip trigger with the tooltip via <code>aria-describedby</code> and <code>id</code></li>
<li>ensure the tooltip is unreachable when hidden via <code>aria-hidden</code></li>
</ol>
<p>A full HTML snippet for a sample text field asking for a name, with hint text in a tooltip follows. This HTML snapshot assumes the tooltip is in an open state.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Full Name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">aria-describedby</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name-hint<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name-hint<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">  Please enter your given name followed by your family name</span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<h4>Label tooltip semantics</h4>
<p>Using a tooltip as the accessible name is similar; instead of <code>aria-describedby</code>, the association would be made with <code>aria-labelledby</code>, and the tooltip container would not necessarily need <code>aria-hidden</code>. It is also possible to drop <code>aria-labelledby</code> entirely and have the tooltip text be a child of the control (at least for controls that support children). The main caveat for the name use case is that UI controls should always have some sort of label visible. This technique would not replace the need for a visible label next to an input, for example. A good use would be to add a text alternative for icon buttons.</p>
<h4>Semantics to avoid</h4>
<p>There are certain attributes that are missing in the above descriptions that the more ARIA-conscious may have already noticed. In no particular order, these are some accessibility-related attributes that may seem relevant, but are not currently recommended:</p>
<ul>
<li><code>role=&quot;tooltip&quot;</code>: the unloved child of roles, this omission is perhaps the weirdest in an article specifically about tooltips. While it's not a <em>bad</em> idea to add it to the tooltip element, it doesn't seem to do much good either. The <code>tooltip</code> role does not appear to affect screen reader announcements in any meaningful way -- <code>aria-describedby</code> and <code>aria-labelledby</code> do all the heavy lifting. If you do decide to add it, use it only for descriptive tooltips along with <code>aria-describedby</code>. There is more context in this Github thread: <a href="https://github.com/w3c/aria/issues/979">github.com/w3c/aria/issues/979</a></li>
<li><code>aria-haspopup</code>: although a tooltip may visually look like a popup, this attribute is for more interactive popups -- specifically only menus, listboxes, trees, grids, and dialogs are allowed in conjunction with <code>aria-haspopup</code>. Using a generic value of <code>aria-haspopup=&quot;true&quot;</code> will be interpreted as if it were <code>aria-haspopup=&quot;menu&quot;</code>. Since tooltips are not intended to be interacted with or navigated to, <code>aria-haspopup</code> should not be used to indicate a tooltip.</li>
<li><code>aria-live</code>: as the ultimate fallback for communicating any sort of dynamic page change, <code>aria-live</code> can be a tempting solution to complaints of tooltip text not being read by screen readers. However, live regions have some significant drawbacks for tooltip use: they can not be reliably re-read by a screen reader user, they may interrupt other content (e.g. announcing the name of the control on focus), and a screen reader user can't opt out of hearing them. It's true that <code>aria-describedby</code> may or may not be announced depending on a number of factors including user-selected verbosity settings, but that is the desired behavior for hint text.</li>
</ul>
<h3 id="interaction">Interaction</h3>
<p>The interaction support for displaying, hiding, and reading the tooltip content is the same whether the tooltip is used for a control's name or description.</p>
<h4>Focus and hover</h4>
<p>The first step is to ensure that the visual display can be controlled by either a keyboard or a mouse. To do this, the tooltip should open on focus or mouse over, and closes on blur or mouse out. Combining pointer and keyboard events should not create multiple tooltips or other buggy behavior. Since the UI control associated with the tooltip presumably has some sort of default action on click/enter or space/input, those interactions are not available for use in displaying or hiding the tooltip. If the UI control does not perform any actions or accept user input, it probably shouldn't have a tooltip at all (see the <a href="https://www.w3.org/TR/wai-aria-practices-1.1/#disclosure">disclosure button pattern</a> instead).</p>
<h4>Pointer (lack of) access</h4>
<p>Now that phone browsing has taken over, providing touch access has become imperative and this also benefits users of other non-mouse pointer device such as eye trackers. Unfortunately, one of the major drawbacks to tooltips is that they are inaccessible to touch devices when attached to buttons or links. This is because hover is unavailable on a touch device, and it is also impossible to focus a button or link without activating it. The same limitation exists for other pointer-controlled assistive tech like eye gaze. There is currently no workaround, although tooltips on form inputs will still work as expected.</p>
<h4>WCAG 2.1: dismissable, hoverable, and persistent</h4>
<p>One of the rules added in the Web Content Authoring Guildelines (WCAG) update from 2.0 to 2.1 is the <a href="https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html">1.4.13: Content on Hover or Focus</a> criterion. This new guideline expands the work required to make a compliant tooltip, but should make overlays in general significantly more accessible and less disruptive. WCAG 2.1 requires any content appearing on hover or focus to be dismissable, hoverable, and persistent.</p>
<p>To achieve those, a tooltip should:</p>
<ul>
<li>Hide when a keyboard user presses &quot;Escape&quot; (unless the tooltip will never overlap other content).</li>
<li>Allow a mouse or pointer user to hide the tooltip, ideally through a close button (unless the tooltip will never overlap other content). The tooltip should not re-appear on subsequent hovers -- think of a zoom user trying to center their view on a specific area without triggering the tooltip and obscuring content.*</li>
<li>Allow a mouse user to move their mouse over the tooltip content without dismissing the tooltip -- ideally in a manner that does not require laser focus and precision mouse control.</li>
<li>Remain in view until the user actively dismisses it, or it is no longer valid (e.g. if a loading tooltip appeared, then it could disappear after the content loaded).</li>
</ul>
<p>An extra note for those who closely read WCAG: &quot;unless the tooltip will never overlap other content&quot; is less of an exception than it appears. Even if a tooltip does not appear to overlay other content at a certain screen size, it may do so at a different screen size or level of zoom.</p>
<p>(*) An even more nitpicky side note: WCAG 1.4.13 says that a tooltip should be dismissable &quot;without moving pointer hover or keyboard focus,&quot; then goes on to suggest the Escape key to fulfill this requirement. This makes sense for keyboard users, but not at all for mouse users. On a usability level, people who primarily rely on a mouse or pointer are less likely to know keyboard shortcuts, and may not be able to use them. On a technical level, it is impossible to capture an escape press on a control that is hovered but not focused. A global escape listener would not be able to differentiate between a user wanting to dismiss a tooltip vs. close a dialog, if one were open. In short, the only feasible solution is to provide both keyboard and pointer methods of dismissal.</p>
<h3 id="content">Content</h3>
<p>Tooltips should only ever contain non-essential content. The best approach to writing tooltip content is to always assume it may never be read. As mentioned above, touch devices and other alternative pointers can't reach tooltips on buttons or links, and screen readers sometimes ignore descriptive text by default. It should be possible to infer how to use the UI without reading any tooltips. If that is not the case, it would be best to move all necessary content out of tooltips and into an area with more robust access and discoverability.</p>
<p>In addition to writing only supplemental content, the following should also be true:</p>
<ul>
<li><strong>Write concise tooltip text.</strong> Imagine someone on a small screen or with high zoom needing to pan around just to read the tooltip.</li>
<li><strong>Avoid rich content.</strong> Formatting such as bold text, italics, headings, icons, etc. will not be conveyed through <code>aria-describedby</code> or <code>aria-labelledby</code>.</li>
<li><strong>No interactive content.</strong> Any interactive content such as links or buttons should not be placed within a tooltip.</li>
</ul>
<h2 id="best-practices-summary">Best practices summary</h2>
<ul>
<li>Only interactive elements should trigger tooltips</li>
<li>Tooltips should directly describe the UI control that triggers them (i.e. do not create a control purely to trigger a tooltip)</li>
<li>Use <code>aria-describedby</code> or <code>aria-labelledby</code> to associate the UI control with the tooltip. Avoid <code>aria-haspopup</code> and <code>aria-live</code></li>
<li>Do not use the <code>title</code> attribute to create a tooltip</li>
<li>Do not put essential information in tooltips</li>
<li>Provide a means to dismiss the tooltip with both keyboard and pointer</li>
<li>Allow the mouse to easily move over the tooltip without dismissing it</li>
<li>Do not use a timeout to hide the tooltip</li>
</ul>
<p>If this article leaves you hungry for more tooltip drama and intrigue, never fear. You can continue your journey into tooltip mastery by perusing any of the links under &quot;Further reading.&quot; Also: get involved! Comment on this <a href="https://github.com/w3c/aria/issues/979">W3C tooltip issue</a> with thoughts, questions, and concerns to influence the future of expected tooltip behavior.</p>
<h3 id="code-samples">Code samples</h3>
<p>Here is a simple <a href="https://codepen.io/smhigley/pen/KjoerX">Codepen example</a>, also viewable without the code editors as a <a href="https://s.codepen.io/smhigley/debug/KjoerX">full page pen</a>. Scott O'Hara also has a much more comprehensive, documented <a href="https://github.com/scottaohara/a11y_tooltips">example on github</a>.</p>
<h2 id="further-reading%3A">Further reading:</h2>
<ul>
<li><a href="https://www.24a11y.com/2017/the-trials-and-tribulations-of-the-title-attribute/">www.24a11y.com/2017/the-trials-and-tribulations-of-the-title-attribute</a></li>
<li><a href="https://ebay.gitbook.io/mindpatterns/disclosure/tooltip">ebay.gitbook.io/mindpatterns/disclosure/tooltip</a></li>
<li><a href="https://inclusive-components.design/tooltips-toggletips/">inclusive-components.design/tooltips-toggletips</a></li>
<li><a href="https://a11yproject.com/posts/title-attributes/">a11yproject.com/posts/title-attributes</a></li>
<li><a href="https://developer.paciellogroup.com/blog/2013/01/using-the-html-title-attribute-updated/">developer.paciellogroup.com/blog/2013/01/using-the-html-title-attribute-updated</a></li>
</ul>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>Escaping 101</title>
    <link href="https://sarahmhigley.com/writing/escaping-101/"/>
    <updated>2019-10-10T17:00:00-07:00</updated>
    <id>https://sarahmhigley.com/writing/escaping-101/</id>
    <content type="html"><![CDATA[
      <p>Earlier this week when filling out an expense report -- a tedious chore that nearly everyone wishes would be over roughly five minutes before starting -- I got about halfway through before inadvertently deleting all my progress and forcing myself to start over.</p>
<p>Why? I had used the escape key to collapse a select menu, and ended up closing the modal dialog containing the entire expense form instead. This happened because the select menu really should have been a <code>&lt;select&gt;</code>, but wasn't. Instead it was a custom dropdown, and whoever made it remembered that dropdowns should dismiss on escape, but didn't test that behavior in context. So of course, being an a11y-focused developer, my immediate response was to put off finishing the expense report and start writing a blog post about the escape key instead.</p>
<h2 id="why-escape%3F">Why escape?</h2>
<p>When starting out on the long, pothole-ridden journey to better keyboard accessibility, the three most common pit stops along the road (the Shell, BP, and Chevron, if you will) are Enter/Space, arrow keys, and escape. There are other keys, of course -- Home, End, PageUp, PageDown all make appearances as the occasional drive-through coffee stand or 2am IHOP.</p>
<p>Then there are <a href="https://webaim.org/techniques/keyboard/accesskey">accesskeys</a>, the weird roadside attractions of accessibility: you periodically see signs for them, but almost never actually visit. In the general run of things, however, a developer working on custom keyboard handling for the web will generally spend the most time on these keys:</p>
<ul>
<li><a href="https://marcysutton.com/links-vs-buttons-in-modern-web-applications">Enter or Space</a>: perform the primary action of the control.</li>
<li>Arrow keys: move focus to the previous or next control, when appropriate.</li>
<li>Escape: exit the current context.</li>
</ul>
<p>Enter, Space, and arrow keys are all fairly predictable. By that I mean it is very rare to encounter uncertainty from either the developer or the user around what should happen when the spacebar is pressed.</p>
<p>...and please don't come at me with your split buttons or selectable editable tree items, write your own article ;)</p>
<p>This is a slight oversimplification, but: some combination of enter and space perform the primary action of the currently focused control, and arrow keys shift focus in one or two dimensions.</p>
<p>Escape, on the other hand, is a little trickier. It has become an all-purpose &quot;get me out of here!&quot; key; something like <code>array.pop()</code> but for UI contexts.</p>
<h2 id="when-should-you-escape%3F">When should you escape?</h2>
<p>(Or: what do I mean when I say &quot;UI context&quot;?)</p>
<h3 id="part-1%3A-overlays">Part 1: Overlays</h3>
<p>In its simplest incarnation, a new context is created when an overlay opens and fully or partially covers some other stuff (technical term) in the same window. When this happens, escape should allow the user to return to their previously un-obscured view. Almost all of the definitions of escape-based interactions in the <a href="https://www.w3.org/TR/wai-aria-practices-1.1/">Aria Authoring Practices</a> fall in this bucket:</p>
<ul>
<li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#combobox">Combobox</a></li>
<li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal">Modal dialog</a></li>
<li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton">Menu</a></li>
<li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip">Tooltip</a></li>
</ul>
<p>A few more overlays you may find yourself needing to escape from:</p>
<ul>
<li>Slidepanes</li>
<li>Non-modal dialogs (e.g. <a href="https://www.w3.org/TR/wai-aria-practices-1.1/examples/disclosure/disclosure-navigation.html">disclosure buttons with popups</a>)</li>
<li>Custom context menus</li>
</ul>
<p>Generally overlays are pretty easy to recognize. Anything that appears on top of the regular flow of the document, whether <a href="https://www.nngroup.com/articles/modal-nonmodal-dialog/">modal or non-modal</a>, interactive or not, counts as an overlay and should be easy to dismiss. See the <a href="https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html">WCAG 2.1 content on hover or focus</a> criterion, or my earlier <a href="https://sarahmhigley.com/writing/tooltips-in-wcag-21/">long tooltip <s>ant</s> article</a> for more context on why.</p>
<h3 id="part-2%3A-tab-traps">Part 2: Tab traps</h3>
<p>The most common example of a tab trap was already covered in the previous section -- the modal dialog. However, there are other examples of UI elements that block tabbing without visually breaking the page flow:</p>
<ul>
<li>A rich text editor or code editor: tabbing within these inserts an actual tab character, so there needs to be another way of exiting and moving past them.</li>
<li>Too many tab stops: counter-intuitively, too many focusable items can also effectively block keyboard navigation. Imagine a table with 50 rows and a few interactive items per row; it would take a lot of patience to get through 100+ tab stops. A <a href="https://a11yproject.com/posts/skip-nav-links/">skip link</a> at the beginning would help someone who wants to bypass the table entirely, but not someone who wants to browse through the table's data and then either return to the beginning of the table (maybe there are filters or other controls there), or skip past remaining rows.</li>
</ul>
<h3 id="part-3%3A-cancel-changes">Part 3: Cancel changes</h3>
<p>This category of escapable contexts has nothing to do with page navigation, and everything to do with editing content. Any interface that allows the user to switch between reading and editing (like a cell within an editable grid) should provide the option to cancel all changes and return to the read mode at any point when editing.</p>
<p>If edit mode vs. read mode is a full page change (for example, the github gist editor), then a cancel button makes more sense than escape for switching back to read mode. However, for in-place edits (for example, changing a single cell within an editable grid) it makes sense to allow the user to hit escape to cancel and return to read mode.</p>
<h2 id="so-you've-escaped.-now-what%3F">So you've escaped. Now what?</h2>
<p>(Or: where should focus go next?)</p>
<p>Some popups like combobox menus and tooltips never take focus, so no active focus handling needs to occur when they are dismissed.</p>
<p>Other popups should take focus when opened -- modal dialogs, modal slidepanes, some menus -- and should send focus back to the element that originally opened the popup when closed. If that element no longer exists, it gets a bit trickier. The ARIA Authoring Practices Guide has a <a href="https://www.w3.org/TR/wai-aria-practices-1.1/#h-note-7">long note on focus handling when closing modals</a>. The short version is: take a second to think about where the user would expect to be, and send focus there.</p>
<blockquote>
<p><img src="/writing/assets/nope-octopus.jpg" alt="still frame of the nope octopus meme"><br>
Start by putting yourself in your users' frame of mind</p>
</blockquote>
<p>It's also possible to put focus in different places depending on how a modal is closed: for example, a modal form that creates a new table row may move focus to that row when submitted. Even if this type of logic exists, closing via escape should take the user back to the original trigger button.</p>
<p>Our third category, non-modal tab traps, are a little harder. Escape should jump the user out of the tab trap but there's no obvious place to put focus, and the user shouldn't end up immediately re-entering the tab trap on the next tab or shift + tab. There's no way of knowing whether the user intends to move forwards or backwards after exiting, so you can't simply place focus before or after the trap. Combining escape with a skip link can be a powerful workaround, which is what this <a href="https://www-nzgzcsougj.now.sh/studies/grid/simple-actions">grid example</a> does.</p>
<h2 id="handling-conflicts-when-escaping">Handling conflicts when escaping</h2>
<p>(stopPropagation: Just Do It™)</p>
<p>When handling escape key event listeners within an application, it's important to always stop the event from propagating. This prevents multiple nested components from all trying to respond to the same escape, so a user trying to dismiss a toolitp or combobox menu within a modal won't accidentally close the modal (thus bringing us back to the original modal that kicked all this off). A well-placed <code>event.stopPropagation()</code> would have prevented that original bug.</p>
<p>A good rule of thumb when coding UI components is if you ever write a listener for a key event and do anything at all in response to the escape key, then also stop event propagation.</p>
<p>Example:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">myCombobox<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keydown'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">'Escape'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    myCombobox<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<h3 id="external-conflicts">External conflicts</h3>
<p>It's uncommon for web apps or websites to ever run into a situation where custom escape handling might iinterfere with native platform behavior, but when testing with Windows screen readers it's good to know that the first escape press might cause a switch from <a href="https://tink.uk/understanding-screen-reader-interaction-modes/">application mode to browse mode</a>. If this happens, the event may or may not be sent to the DOM as well -- NVDA does not send a keyboard event to the DOM when switching modes, but JAWS does. This is worth remembering, since it is entirely possible for a JAWS user to accidentally dismiss a popup when intending to switch modes. The only real workaround to this is to make escaped contexts easily recoverable -- modals and dropdowns can be re-opened, and tab traps can be re-entered. Ideally something like a modal form would either save user input if closed and re-opened or, even better, live within its own separate page.</p>
<h2 id="final-thoughts">Final Thoughts</h2>
<p>Escape has been used to do some weird things in native applications. In Internet Explorer, escape will clear a text input; same in Microsoft Outlook for Windows and File Explorer. Browser URL bars in Windows and MacOS will not only clear input but also restore the current URL on escape. On Windows, escape lets you exit the application menu and takes you back to whatever last had focus. Pressing escape in the chat window of Microsoft Teams jumps you to the most recent message. And there are certainly more escape oddities out there, waiting to be discovered.</p>
<p>While many of those seem uninituitive to me, they may make sense to someone else. When venturing off the beaten path of documented patterns and simple escape behavior, the ultimate test is always a well-rounded usability study and real-world feedback.</p>
<p>In the meantime, check out <a href="https://www-nzgzcsougj.now.sh/studies/grid/simple-actions">the grid example page</a> for a practical example containing several different uses of escape.</p>
<p>Now to finish that expense report...</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>Playing with state</title>
    <link href="https://sarahmhigley.com/writing/playing-with-state/"/>
    <updated>2019-11-03T16:00:00-08:00</updated>
    <id>https://sarahmhigley.com/writing/playing-with-state/</id>
    <content type="html"><![CDATA[
      <p>In an effort to convince everyone (who reads these blog posts) that I don't only obsess over tooltips, let's talk about another seemingly simple concept and make it unexpectedly complex. This time, we're tackling the play/pause toggle button.</p>
<p>By a play/pause toggle, I mean this thing:</p>
<p><img src="https://user-images.githubusercontent.com/3819570/67927236-ff256480-fbaf-11e9-8aec-55a4353bfe5b.jpg" alt="Screenshot of the youtube player with the play button highlighted. Maru is staring at a box in the backgroud."></p>
<p>i.e. that thing you click on (or key press/touch/switch/etc) to get your daily cute cat fix. You press it, it switches from a play icon to a pause icon, Maru jumps into a box, and bliss ensues.</p>
<p>That's where I barge in and ask about that middle part -- switching from play to pause -- and ruin it all (sorry Maru). The thing is, a play/pause button is effectively a <a href="https://inclusive-components.design/toggle-button/">toggle button</a>, by which I mean it switches between two binary states based on user interaction. The established pattern for accomplishing this is by updating the <code>aria-pressed</code> state attribute, which accepts a true/false value.</p>
<p><img src="https://user-images.githubusercontent.com/3819570/67974752-ded6c380-fc0a-11e9-98a4-5024af40d294.png" alt="two side by side bookmark buttons, one grey with aria-pressed set to false, and one blue with aria-pressed set to true"></p>
<p>Play/pause buttons (and by extension, start/stop buttons) are the black sheep of the toggle button family. They generally do not have any <code>aria-pressed</code> on/off state defined, and instead change their accessible name from &quot;play&quot; to &quot;pause&quot; when activated. When I say &quot;generally,&quot; I mean this was true for the following sites, chosen for no formal reason other than that I happened to know they would contain media players:</p>
<ul>
<li><a href="https://www.youtube.com/">Youtube</a>: dynamically changes <code>aria-label</code></li>
<li><a href="https://mixer.com/">Mixer</a>: dynamically changes <code>aria-label</code></li>
<li><a href="https://vimeo.com/">Vimeo</a>: dynamically changes name from contents (by swapping out labelled graphics)</li>
<li><a href="https://soundcloud.com/">Soundcloud</a>: dynamically changes both text content and the <code>title</code> attribute</li>
<li><a href="https://www.w3.org/WAI/tutorials/carousels/working-example/">WAI carousel tutorial</a>: dynamically changes text content</li>
<li><s>Twitter's media player</s>: Twitter's media player actually has no accessible name and no state defined for its play button. Whoops.</li>
</ul>
<p>So why does this matter? Traditional toggle buttons switch <code>aria-pressed</code> from true to false, and play/pause buttons change their calculated name from &quot;play&quot; to &quot;pause.&quot; No big deal?</p>
<h2 id="property-vs.-state">Property vs. State</h2>
<p>Most dynamic changes to a UI component (at least, changes that happen while a user is interacting with it) are communicated through state changes rather than property changes. The ARIA spec has this to say about <a href="https://www.w3.org/WAI/PF/aria/states_and_properties#statevsprop">states vs. properties</a>:</p>
<blockquote>
<p>One major difference is that the values of properties (such as aria-labelledby) are often less likely to change throughout the application life-cycle than the values of states (such as aria-checked) which may change frequently due to user interaction. Note that the frequency of change difference is not a rule; a few properties, such as aria-activedescendant, aria-valuenow, and aria-valuetext are expected to change often.</p>
</blockquote>
<p>This comes across as fairly similar to the use of states vs. properties in javascript application frameworks as well -- a common convention is that a change in application state will trigger a re-render, while a change to a property will not (unless manually triggered).</p>
<p>It might therefore seem reasonable to also expect a screen reader to pick up and announce state changes but not property changes. However, as with many things related to ARIA, it is not that simple.</p>
<p>Some properties such as <code>aria-activedescendant</code>, <code>aria-valuenow</code>, and <code>aria-valuetext</code> can be expected to be announced by screen readers when changed (support issues aside). Some state changes (such as <code>aria-disabled</code>) are not consistently announced when changed. However, as a very general rule of thumb, it is safer to assume that a change in state will be communicated than a change in property (and please never change a role during a user interaction).</p>
<p>Side note: when I reference changes that are announced by screen readers, I mean a change to the element that currently has focus that causes some sort of screen reader-generated feedback without the user moving focus.</p>
<p>Most screen readers nowadays rely on <a href="https://alistapart.com/article/semantics-to-screen-readers/">Accessibility API</a> events to get notifications about changes to the DOM. So, for example, when <code>aria-pressed</code> updates from <code>true</code> to <code>false</code> a <code>PropertyChangedEvent</code> will fire, allowing a screen reader to listen to that event and react to it. Each platform's Accessibility API handles this slightly differently (<code>PropertyChangedEvent</code> is specific to <a href="https://docs.microsoft.com/en-us/windows/win32/winauto/entry-uiauto-win32">UIA</a> on Windows), but the principal is roughly the same. This <a href="https://w3c.github.io/core-aam/#mapping_events_state-change">list of state and property change events</a> details which states and properties should raise API events when changed. Not all of those states and properties will necessarily be communicated by all screen readers, but these are the ones that at least have a mechanism to do so.</p>
<p>All this is relevant since <code>aria-pressed</code> is a state, and the accessible name is a property.</p>
<h2 id="name-changes">Name Changes</h2>
<p>The conventional wisdom is to not change the name of a control while the user is interacting with it. It turns out this is pretty good conventional wisdom: upon testing, I found that while a name change is sometimes announced, it is not nearly consistent enough to be relied upon.</p>
<p>Using this <a href="https://jsfiddle.net/czsnj9xp/show">button code sample</a>, I tested whether name changes and <code>aria-pressed</code> changes were announced using the following screen reader/browser combinations, and using a few different methods of defining the accessible name:</p>
<div class="table-wrapper">
  <table class="support-table">
    <thead>
      <tr>
        <th></th>
        <th scope="col"><code>aria-label</code></th>
        <th scope="col"><code>aria-labelledby</code></th>
        <th scope="col">content</th>
        <th scope="col"><code>aria-pressed</code></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th scope="row">NVDA + Firefox</th>
        <td class="true">yes</td>
        <td class="false">no</td>
        <td class="false">no</td>
        <td class="true">yes</td>
      </tr>
      <tr>
        <th scope="row">NVDA + Chrome</th>
        <td class="true">yes</td>
        <td class="true">yes</td>
        <td class="false">no</td>
        <td class="true">yes</td>
      </tr>
      <tr>
        <th scope="row">NVDA + Edge</th>
        <td class="true">yes</td>
        <td class="true">yes</td>
        <td class="true">yes</td>
        <td class="true">yes</td>
      </tr>
      <tr>
        <th scope="row">JAWS + Firefox</th>
        <td class="false">no</td>
        <td class="false">no</td>
        <td class="false">no</td>
        <td class="true">yes</td>
      </tr>
      <tr>
        <th scope="row">JAWS + Chrome</th>
        <td class="false">no</td>
        <td class="false">no</td>
        <td class="false">no</td>
        <td class="true">yes</td>
      </tr>
      <tr>
        <th scope="row">JAWS + Edge</th>
        <td class="false">no</td>
        <td class="false">no</td>
        <td class="false">no</td>
        <td class="true">yes</td>
      </tr>
      <tr>
        <th scope="row">JAWS + IE 11</th>
        <td class="true">yes</td>
        <td class="true">yes</td>
        <td class="true">yes</td>
        <td class="true">yes</td>
      </tr>
      <tr>
        <th scope="row">Narrator + Edge</th>
        <td class="true">yes</td>
        <td class="true">yes</td>
        <td class="true">yes</td>
        <td class="true">yes</td>
      </tr>
      <tr>
        <th scope="row">iOS VoiceOver + Safari</th>
        <td class="true">yes</td>
        <td class="true">yes</td>
        <td class="true">yes</td>
        <td class="true">yes</td>
      </tr>
      <tr>
        <th scope="row">macOS VoiceOver + Safari</th>
        <td class="true">yes</td>
        <td class="true">yes</td>
        <td class="true">yes</td>
        <td class="true">yes</td>
      </tr>
      <tr>
        <th scope="row">Talkback + Chrome</th>
        <td class="false">no</td>
        <td class="false">no</td>
        <td class="false">no</td>
        <td class="true">yes</td>
      </tr>
    </tbody>
  </table>
</div>
<p>Side note: NVDA, you drunk?</p>
<h2 id="actual-recommendations">Actual Recommendations</h2>
<p>You made it this far, congratulations! Time for some concrete recommendations. The big takeaway should be this:</p>
<p><strong>Change the name, but not the state, of play/pause buttons. Use state for all other toggle buttons.</strong></p>
<p>Why? First, because the mechanics of a play/pause (or start/stop) button are so well understood by now that immediate state change feedback is not critical.</p>
<p>This is combined with the fact that using <code>aria-pressed=&quot;false&quot;</code> for a pause button would result in some variation of &quot;play button off&quot; to be read by screen readers, which is not particularly reflective of a visual pause icon. Creating a difference between the programmatic label and visual text (or icon) can cause issues for speech control users, sighted screen reader users, and effective communication between blind screen reader users and visual users (e.g. during a support call).</p>
<p>This one edge case does not take away the general recommendation to change the <code>aria-pressed</code> state, and not the name, for other toggle buttons. Toggle buttons that are part of less well-known interfaces would benefit more from providing immediate feedback, and the only reliable cross-screen-reader cross-browser way to do that is to use <code>aria-pressed</code>.</p>
<p>As a final note, never change both the name and <code>aria-pressed</code> state in tandem. That way, confusion lies. Just imagine trying to parse the meaning of &quot;play button, on&quot; vs. &quot;pause button, off&quot;.</p>
<h2 id="further-reading">Further Reading</h2>
<ul>
<li><a href="https://scottaohara.github.io/a11y_styled_form_controls/src/toggle-button-switch/">Styled Toggle Buttons</a> from Scott O'Hara</li>
<li><a href="https://www.smashingmagazine.com/2017/09/building-inclusive-toggle-buttons/">Building Inclusive Toggle Buttons</a> from Heydon Pickering</li>
<li><a href="https://docs.microsoft.com/en-us/windows/uwp/design/controls-and-patterns/toggles">UWP Toggle Switch description</a>: a Windows desktop toggle pattern, for reference</li>
</ul>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>&lt;select&gt; your poison</title>
    <link href="https://sarahmhigley.com/writing/select-your-poison/"/>
    <updated>2020-01-02T16:00:00-08:00</updated>
    <id>https://sarahmhigley.com/writing/select-your-poison/</id>
    <content type="html"><![CDATA[
      <p>I've been thinking, testing, and talking about custom select components and comboboxes a lot over the past year, and finally condensed all of it into a two-part series of articles written for <a href="https://twitter.com/24accessibility">24 Accessibility</a>. It covers both why this whole mess is so difficult and what patterns are out there, including the new ARIA 1.2 pattern in part 1, and then goes into the results of usability testing and concrete implementation recommendations in part 2.</p>
<ol>
<li>Part 1: <a href="https://www.24a11y.com/2019/select-your-poison/">24a11y.com/2019/select-your-poison</a></li>
<li>Part 2: <a href="https://www.24a11y.com/2019/select-your-poison-part-2/">24a11y.com/2019/select-your-poison-part-2</a></li>
</ol>
<p>The end result is a set of three recommended implementations for a select-only or read-only <code>&lt;select&gt;</code> variant, an editable combobox, and an editable multiselect combobox. While I highly recommend reading the recommendations in the context of the second article to get the nuances of why choices were made and what other options there are, here's the quick cheat sheet:</p>
<p>The links each go to a github repository of web components written using <a href="https://stenciljs.com/">StencilJS</a> and Typescript. There is a <a href="https://codepen.io/smhigley/pen/gObMVzv">Codepen implementation</a> with all three implementations written in vanilla JS.</p>
<ol>
<li><a href="https://github.com/microsoft/sonder-ui/tree/master/src/components/select">Select-only combobox</a></li>
<li><a href="https://github.com/microsoft/sonder-ui/tree/master/src/components/combobox">Editable combobox</a></li>
<li><a href="https://github.com/microsoft/sonder-ui/tree/master/src/components/multiselect">Multi-select</a></li>
</ol>
<h2 id="more-links">More Links</h2>
<p>For anyone who would like to play around with all the select component variations tested for this article, they can be found in three separate codepens here:</p>
<ol>
<li><a href="https://codepen.io/smhigley/pen/JjoKgxb">All select-only variations</a></li>
<li><a href="https://codepen.io/smhigley/pen/BayzXbO">All editable combobox variations</a></li>
<li><a href="https://codepen.io/smhigley/pen/GRgjRVN">All multi-select variations</a></li>
</ol>
<p>Finally, the environments for the two usability studies that were run with disabled participants are available here:</p>
<ol>
<li><a href="https://select-study-epxfpuejic.now.sh/studies/combobox">Main combobox study</a></li>
<li><a href="https://select-study-epxfpuejic.now.sh/studies/combobox-apg">Additional mini ARIA 1.2 study</a></li>
</ol>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>Roles and relationships</title>
    <link href="https://sarahmhigley.com/writing/roles-and-relationships/"/>
    <updated>2020-01-20T16:00:00-08:00</updated>
    <id>https://sarahmhigley.com/writing/roles-and-relationships/</id>
    <content type="html"><![CDATA[
      <p>Sometimes after dabbling in gateway ARIA semantics like <code>aria-current</code>, landmark roles, and link-button hybrids, a budding accessibility practitioner might find themselves experimenting with more serious roles like <code>menu</code>, <code>listbox</code>, or even <code>treegrid</code>. These are tantalizing, powerful patterns that allow you to create experiences that are not supported by only vanilla HTML. Unfortunately, they are also brittle; even small mistakes in using these roles can take a user on a very bad trip.</p>
<p>Talk to your kids about ARIA before it's too late.</p>
<h2 id="basic-vs.-composite-patterns">Basic vs. composite patterns</h2>
<p>Composite widget patterns like trees and grids differ from basic controls in both expectations for keyboard behavior and semantic structure. Re: keyboard interaction, they generally contain multiple interactive elements, but are only one stop in the tab order. <a href="https://w3c.github.io/aria/#managingfocus">Custom key handling</a> (primarily arrow keys) is required to provide access to all interactive descendants of the container widget.</p>
<p>Composite widgets also have much more rigid requirements for semantic structure. While a button or a checkbox will have rules regarding what ARIA states and properties they support, they function as single isolated interactive elements. A composite widget role will also determine the allowed roles, states, and properties of its descendants. For instance, a tablist must contain only tabs, and those tabs must be its direct children. In contrast, a set of links within a navigation region could be marked up with or without a list, or four levels deep in divs without interfering with parsing the semantics of either the navigation region or the links.</p>
<p>We're not going to spend any time here on when and why to use a composite widget role over a group of simple interactive elements, though that is certainly an important discussion to have. Instead, let's dive straight into the accessibility tree.</p>
<h3 id="the-accessibility-tree%3A-a-quick-definition">The Accessibility tree: a quick definition</h3>
<p>The accessibility tree is an internal browser construct that is used as an intermediate step between converting the DOM into the low-level <a href="https://alistapart.com/article/semantics-to-screen-readers/">accessibility APIs</a> that screen readers (and potentially other assistive tech) consume. It is also currently distinct from the <a href="https://www.24a11y.com/2019/web-components-and-the-aom/">Accessibility Object Model (AOM)</a>, which is a proposed spec for an API similar to the DOM.</p>
<p>The per-browser instructions for inspecting the accessibility tree are below:</p>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/accessibility/reference#pane">Chrome and Chromium Edge</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector">Firefox</a></li>
<li><a href="https://support.apple.com/guide/safari-developer/view-node-properties-for-a-dom-node-dev160f70435/mac">Safari</a></li>
</ul>
<p>Since the accessibility tree is an internal browser abstraction, there are some minor differences between browsers. For example, a plain <code>&lt;div&gt;</code> is represented as a <code>GenericContainer</code> in Chrome, and a <code>section</code> in Firefox. Still, the differences are minor and all implementations allow you to inspect which nodes exist in the accessibility tree, as well as check their calculated names, roles, values, states, and properties.</p>
<figure>
  <img src="/writing/assets/chrome-a11ytools.png" alt="Chrome Elements inspector showing accessibility information about a list on a blog post on this site">
  <figcaption>Chrome shows a subset of the accessibility tree in the Elements pane when inspecting DOM nodes</figcaption>
</figure>
<figure>
  <img src="/writing/assets/firefox-a11ytools.png" alt="Firefox accessibility inspector pane showing the same list">
  <figcaption>Firefox has a separate devtools pane showing the entire accessibility tree</figcaption>
</figure>
<p>I personally prefer the Firefox Accessibility inspector, since it allows you to pick nodes from the rendered page and walk the entire accessibility tree, much like inspecting the DOM in the Elements pane.</p>
<h2 id="relationships-between-nodes">Relationships between nodes</h2>
<p>Composite widgets like listbox, grid, tree, etc. rely on strict parent/child and sibling relationships between accessibility nodes<br>
to communicate calculated information about those relationships to screen reader users. Information like item position within a list, column and row information in a table or grid, and level information in a tree may be missing or incorrect if node hierarchy is not properly defined. The practical impact varies based on browser and screen reader.</p>
<p>Inserting an extra <code>&lt;div&gt;</code> between a table element and a row, or a row and a table cell, can break screen reader shortcuts, column header/row header/cell association, and indexing of columns and rows. This is easy to debug by inspecting the table's generated accessibility tree in the Firefox devtools accessibility pane:</p>
<figure>
  <img src="/writing/assets/table-incorrect-semantics.png" alt="accessibility pane in Firefox devtools showing a broken table structure">
  <figcaption>Grid and row nodes are separate by extra section nodes caused by <code>&lt;div&gt;</code> elements in the DOM</figcaption>
</figure>
<figure>
  <img src="/writing/assets/table-correct-semantics.png" alt="devtools accessibility tree showing a clean table structure">
  <figcaption>No non-grid roles are present between grid/row/cell roles</figcaption>
</figure>
<h3 id="all-composite-widget-roles">All composite widget roles</h3>
<p>Here's a list of all roles that require specific parent/child relationships to function correctly (as of ARIA 1.2):</p>
<ul>
<li><code>combobox</code> - <code>listbox</code> - <code>option</code> (this one is slightly different, see the <a href="https://sarahmhigley.com/writing/select-your-poison/">combobox post</a> for specifics)</li>
<li><code>grid</code> - <code>caption</code> (optional, must be first child if used) / <code>rowgroup</code> (optional) - <code>row</code> - <code>gridcell</code> / <code>columnheader</code> / <code>rowheader</code></li>
<li><code>listbox</code> - <code>group</code> (optional) - <code>option</code></li>
<li><code>menu</code> / <code>menubar</code> - <code>group</code> (optional) - <code>menuitem</code> / <code>menuitemcheckbox</code> / <code>menuitemradio</code></li>
<li><code>radiogroup</code> - <code>radio</code></li>
<li><code>tablist</code> - <code>tab</code></li>
<li><code>tree</code> - <code>group</code> (optional) - <code>treeitem</code></li>
<li><code>treegrid</code> - <code>rowgroup</code> (optional) - <code>row</code> - <code>gridcell</code> / <code>columnheader</code> / <code>rowheader</code></li>
</ul>
<p>These document structure roles are not interactive, but also rely on a strict semantic hierarchy:</p>
<ul>
<li><code>associationlist</code> - <code>associationlistitemkey</code> / <code>associationlistitemvalue</code></li>
<li><code>feed</code> - <code>article</code></li>
<li><code>figure</code> - <code>caption</code> (optional, must be first or last child)</li>
<li><code>list</code> - <code>listitem</code></li>
<li><code>table</code> - <code>caption</code> (optional, must be first child if used) / <code>rowgroup</code> (optional) - <code>row</code> - <code>cell</code> / <code>columnheader</code> / <code>rowheader</code></li>
</ul>
<h3 id="looking-up-correct-semantics">Looking up correct semantics</h3>
<p>The <a href="https://w3c.github.io/aria/">ARIA spec</a> details which roles need specific parent or child relationships, though it's easy to miss. When looking up the documentation for a role, check for entries for <a href="https://w3c.github.io/aria/#mustContain">Required Owned Elements</a> and <a href="https://w3c.github.io/aria/#scope">Required Context Role</a> in the role's Characteristics table. If present, the role in question must be the direct child of a required context role, and its own children must have one of the roles in required owned elements.</p>
<p>For example, the entry for <a href="https://w3c.github.io/aria/#grid">grid</a> notes that it can either have <code>row</code> or <code>rowgroup -&gt; row</code> as required owned elements. Follow those links, and you can piece together what the role heirarchy should be:</p>
<ul>
<li><code>grid</code>
<ul>
<li>optional: <code>caption</code></li>
<li>optional: <code>rowgroup</code>
<ul>
<li><code>row</code>
<ul>
<li>optional: <code>rowheader</code></li>
<li>optional: <code>columnheader</code></li>
<li><code>gridcell</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="fixing-an-incorrect-accessibility-tree">Fixing an incorrect accessibility tree</h2>
<p>A few techniques for repairing accessibility tree issues, once found.</p>
<h3 id="1.-fix-the-dom-hierarchy">1. Fix the DOM hierarchy</h3>
<p>No ARIA is always the best ARIA. If it's possible to make the DOM structure match the desired accessibility tree structure, that is always the best and most robust solution.</p>
<h3 id="2.-role%3D%22presentation%22-or-role%3D%22none%22">2. <code>role=&quot;presentation&quot;</code> or <code>role=&quot;none&quot;</code></h3>
<p>Sometimes it isn't possible to alter the DOM structure, whether because of styling needs, support requirements, or use of external UI libraries. In those cases, it can be possible to clean up the accessibility tree through the judicious use of `role=&quot;presentation/none&quot;.</p>
<p>For example, the following broken tree structure:</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tree<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>treeitem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      Item 1</span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub-items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>treeitem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sub-Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>treeitem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sub-Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>treeitem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>treeitem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span></code></pre>
<p>Could be modified to work as follows:</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tree<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-wrapper<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>presentation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>treeitem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      Item 1</span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub-items<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>presentation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>treeitem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sub-Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>treeitem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sub-Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>treeitem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>treeitem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span></code></pre>
<p>You can try inspecting both in the browser in <a href="https://jsfiddle.net/3yd0guk8/">this JSFiddle</a>.</p>
<p>Note that <code>role=&quot;presentation/none&quot;</code> is only required on elements that come <em>between</em> composite widget roles. It would not be necessary to add an extra role to a <code>&lt;div&gt;</code> that is a child of <code>treeitem</code>, or parent of <code>tree</code>.</p>
<p>The two roles, <code>presentation</code> and <code>none</code>, are synonyms. As of writing, <code>presentation</code> has better support, so is slightly preferable over <code>none</code>.</p>
<h3 id="3.-aria-owns">3. <code>aria-owns</code></h3>
<p>Using <code>aria-owns</code> to point to the <code>id</code> of another element entirely separated in the DOM will establish a programmatic parent/child relationship between the two nodes in the accessibility tree.</p>
<h3 id="4.-display%3A-none-and-visibility%3A-hidden">4. <code>display: none</code> and <code>visibility: hidden</code></h3>
<p>CSS can sometimes affect the accessibility tree. Two examples are <code>display: none</code> and <code>visibility: hidden</code>, both of which will remove a node and all its descendents from the accessibility tree, hiding it from all users equally. If this is not desired, there are <a href="https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html">CSS techniques to visually hide content</a> while keeping it accessible to screen readers.</p>
<h2 id="common-(ish)-misconceptions">Common (ish) Misconceptions</h2>
<ol>
<li><code>role=&quot;presentation&quot;</code> is not <code>aria-hidden=&quot;true&quot;</code></li>
</ol>
<p>Applying <code>aria-hidden</code> to an element will remove that element and all its descendants from the accessibility tree entirely, while <code>role=&quot;presentation/none&quot;</code> will only remove the element's default role. Both <code>role=&quot;presentation/none&quot;</code> and <code>aria-hidden=&quot;true&quot;</code> will have the same effect on an <code>&lt;img&gt;</code> tag, but not on an element with content or children.</p>
<ol start="2">
<li><code>aria-controls</code> is not <code>aria-owns</code></li>
</ol>
<p>Even though the combobox pattern has swapped out <code>aria-owns</code> for <code>aria-controls</code>, the two are not interchangeable elsewhere. <code>aria-owns</code> will establish a parent-child relationship between the root node and the referenced node (though reading order will still follow DOM order). <code>aria-controls</code> is a bit more abstract, and has little to no practical impact; only use it for comboboxes, or optionally when the ARIA spec explicitly says it should be used.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>Focus management still matters</title>
    <link href="https://sarahmhigley.com/writing/focus-navigation-start-point/"/>
    <updated>2020-02-26T16:00:00-08:00</updated>
    <id>https://sarahmhigley.com/writing/focus-navigation-start-point/</id>
    <content type="html"><![CDATA[
      <p>The most difficult challenges in programming are:</p>
<ol>
<li>Debating framework choices with a dogmatic fan, and</li>
<li>Naming things</li>
</ol>
<p>There is seemingly no solution for the first problem; you must accept it, adopt a zen-like calm when faced with invocations of bundle sizes and performance benchmarks, and silently plan your backup career doing literally anything else.</p>
<p>For the second problem, naming things, it's generally best to just pick something and move on. After all, any name is better than wasting hours agonizing over whether <code>toggleMenuItemSelection</code> is adequately understandable, descriptive, and concise.</p>
<p>And then, as a counterpoint, we have sequential-focus-navigation-starting-point.</p>
<p><em>You</em> try saying &quot;sequential focus navigation starting point&quot; five times over the course of two minutes, while also trying to explain to someone exactly why they still need to handle focus after closing their dropdown, even though &quot;tabbing works in Chrome.&quot; To prove my point, here is a brief list of names I would much rather use in said calls:</p>
<ul>
<li>focus-start-point</li>
<li>focus-bookmark</li>
<li>starty-focus-party</li>
<li>fast-focus</li>
<li>2-focus-2-furious</li>
<li>fate-of-the-focus</li>
</ul>
<figure>
  <img src="/writing/assets/focus-party-parrot.gif" alt="The party parrot meme, with overlaid text: starty focus party">
  <figcaption>Thank you for reviewing my application to name all future HTML features</figcaption>
</figure>
<h2 id="why-are-we-talking-about-something-focus-something-point%3F">Why are we talking about Something Focus Something Point?</h2>
<p>The sequential focus navigation starting point is a browser feature that enables three types of interaction that were not possible without it:</p>
<ol>
<li>You can follow an internal link to a section or heading, and then start tabbing from that section/heading</li>
<li>You can click anywhere on the page, and begin tabbing from that point</li>
<li>You can hide an element with focus, e.g. by removing it from the DOM or applying <code>display: none</code>, without breaking tabbing.</li>
</ol>
<p>All three behaviors enhance user experience, but the last one in particular has sometimes lured developers into a false sense of security about not handling focus when closing their popups, dropdown menus, or accordions. Although tabbing seems to work fine in these cases, the sequenced-focus-starts-somewhere-around-here-point is only a bandaid; manual focus handling is still necessary for robust accessibility.</p>
<h2 id="where-did-sequential-focus-whatever-come-from%3F">Where did Sequential Focus Whatever come from?</h2>
<p>The idea of a sequential focus navigation starting point began with the need to make same-page anchors work with keyboard navigation. Although same-page linking has been available for as long as <code>&lt;a&gt;</code> elements, keyboard support has often <a href="https://sarahmhigley.com/writing/tooltips-in-wcag-21/">lagged behind visual mouse support</a>, even at a platform level. So although sighted users would immediately have access to the linked section via scroll and could then interact with it using a mouse, keyboard users would have a different experience. As soon as an internal link was activated, focus would jump to the top of the document, and the next tab press would bring you back to the first focusable element in the page.</p>
<p>To fix this, browsers (<a href="https://www.dhs.state.il.us/IITAA/IITAAWebImplementationGuidelines.html#web9.4">possibly starting with IE5</a>) began to send focus to the link target when following a same-page link. This only works if the target is focusable, though. Thus began the long period of recommending <code>tabindex=&quot;-1&quot;</code> be added to to every heading, named anchor, or other static element targeted by an internal link.</p>
<p>The problem is, the visual behavior of internal links still works when the link target isn't focusable, and -- let's be honest -- that's all most developers test for. There was still an opportunity for browsers to improve the keyboard accessibility of this common built-in feature.</p>
<p>Firefox had a solution for this in place <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=262171">as early as 2013</a>, which implemented starting-something-focus-whatsit-navigation-point in all but name. Although keyboard focus would still reset to <code>&lt;body&gt;</code> after activating a link with an unfocusable target, the next tab press would move focus as if the link target had been the active element.</p>
<p><a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=26907#c0">Internet Explorer was the only other browser</a> that handled non-focusable link targets, though it took a different approach and simply forced the target element to receive keyboard focus even if it was otherwise unfocusable.</p>
<p>Chrome took a bit longer (read: three years) to come around, but did <a href="https://chromium.googlesource.com/chromium/src/+/8870612f01ca55a123efbd7bf7024b236d6c12a6">finally implement the same focus behavior</a> as Firefox in February 2016, with one addition:</p>
<blockquote>
<p>If the element pointed by sequential focus navigation starting point is removed from the document tree, a point where there was the element at would be the starting point.</p>
</blockquote>
<p>To summarize: when Chrome fixed tab order for internal links, they also used the same mechanism to save the location of the last focused item, if that item was removed from the page.</p>
<p>Around the same time, Rob Dodson wrote what is still the most thorough, reader-friendly explanation of sequential focus navigation starting point: <a href="https://developers.google.com/web/updates/2016/03/focus-start-point">Removing Headaches from Focus Management</a>, in which he also mentioned that side benefit of gracefully handling focus when active element was hidden.</p>
<p>Incidentally, the phrase &quot;sequential focus navigation why is this so long starting point&quot; first appeared in the HTML specification in <a href="https://github.com/whatwg/html/commit/7456ed7a11c5e205eb795fba0e1583d5939761ab">November 2014</a>, where it was defined as an optional user agent behavior.</p>
<h2 id="how-sfnsp-works-today">How SFNSP works today</h2>
<p>The <a href="https://html.spec.whatwg.org/multipage/interaction.html#sequential-focus-navigation-starting-point">HTML spec for starting focus sequentially point</a> still notes that it is optional, but if it exists it does the following (simplified slightly):</p>
<ul>
<li>Is set to the position of a user's click (or more broadly &quot;when the user indicates that it should be moved&quot;)</li>
<li>Is used to determine which element should get focus when the user presses the tab key</li>
<li>When a user navigates to a fragment (e.g. by clicking on a same-page link, or visiting a URL with a &quot;#&quot; identifier), the start point is set to the target element.</li>
</ul>
<p>There is no mention in the spec of using focus-nav-start-point to handle keyboard navigation when the currently focused element is hidden or removed from the DOM. Despite the lack of official sanction, this behavior seems to be increasingly relied upon by web developers when closing open dialogs, dropdowns, accordions, or any other toggleable region. This conflicts with the prevailing wisdom that when removing a focused element from the DOM, an author must manually set focus on another (logical) node. However, if browsers save focus-navigation-starts-here-point where the removed element used to be, keyboard navigation seems to work fine even if focus is not handled.</p>
<p>As of writing, the following browsers match Chrome's behavior and set the sequential focus navigation starting point when the currently focused element is removed or hidden:</p>
<ul>
<li>Chrome</li>
<li>Safari</li>
<li>Firefox</li>
<li>Edge (Chromium)</li>
</ul>
<p>Of all the browsers on Windows and Mac that I have access to, only Internet Explorer and Edge (pre-Chromium) do not do this. You can try it out now by <a href="#assistive-tech-support">jumping to the next section</a> and then hitting tab.</p>
<p>Overall, this is a win for accessibility. For someone relying on keyboard navigation (or any other assistive tech that navigates via focus, like switch devices), getting sent back to the top of the page every single time a developer forgot to handle focus is an enormous pain. The drawback comes when developers don't fully understand exactly what sequential-focus-belaboring-the-point does and doesn't do, or they don't notice focus bugs when keyboard testing.</p>
<p>Focus navigation starting point is not the same as actual keyboard focus. When focus is lost, through following an internal link or hiding a dialog, keyboard focus moves to the <code>&lt;body&gt;</code> tag. If you query <code>document.activeElement</code> in either of these cases, you can observe this. Alternatively, paste the following snippet into your browser console, <a href="#assistive-tech-support">jump to the next section</a> and watch every focus update in real time:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'focusin'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Focus moved to:'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>activeElement<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>That difference is extremely important when using assistive tech, since screen readers (for example) do not pay attention to the internal browser concept of focus-starts-here-point. While testing with a keyboard alone may make everything seem fine, trying the same interaction while running a screen reader exposes some rough edges.</p>
<h2 id="assistive-tech-support">Assistive Tech support</h2>
<p>Tests were run against this (extremely simple and not otherwise very accessible) example that contains a few accordions and a dialog, only one of which handles focus on dismissal: <a href="https://jsfiddle.net/eo8x3pcu/show">https://jsfiddle.net/eo8x3pcu/show</a>.</p>
<h3 id="results">Results</h3>
<div class="table-wrapper">
  <table class="support-table">
<thead>
<tr>
<th>Screen Reader/AT</th>
<th>Browser</th>
<th>Tab Support</th>
<th>Virtual cursor/browse mode</th>
<th>Context change feedback</th>
</tr>
</thead>
<tbody>
<tr>
<td>NVDA</td>
<td>Firefox</td>
<td class="true">Yes</td>
<td class="true">Yes</td>
<td class="false">No</td>
</tr>
<tr>
<td>NVDA</td>
<td>Chrome</td>
<td class="true">Yes</td>
<td class="false">No</td>
<td class="false">No</td>
</tr>
<tr>
<td>NVDA</td>
<td>Edge</td>
<td class="true">Yes</td>
<td class="false">No</td>
<td class="false">No</td>
</tr>
<tr>
<td>JAWS</td>
<td>All</td>
<td class="true">Yes</td>
<td class="false">No</td>
<td class="false">No</td>
</tr>
<tr>
<td>Narrator</td>
<td>Edge</td>
<td class="true">Yes</td>
<td class="false">No</td>
<td class="false">No</td>
</tr>
<tr>
<td>Narrator</td>
<td>Edge (pre-Chromium)</td>
<td class="false">No</td>
<td class="true">Yes</td>
<td class="false">No</td>
</tr>
<tr>
<td>VoiceOver</td>
<td>iOS Safari</td>
<td>-</td>
<td class="false">No</td>
<td class="false">No</td>
</tr>
<tr>
<td>VoiceOver</td>
<td>macOS Safari</td>
<td class="true">Yes</td>
<td class="true">Yes</td>
<td class="true">Yes</td>
</tr>
<tr>
<td>Talkback</td>
<td>Chrome</td>
<td>-</td>
<td class="false">No</td>
<td class="false">No</td>
</tr>
<tr>
<td>ZoomText</td>
<td>All</td>
<td class="true">Yes</td>
<td>N/A</td>
<td class="false">No</td>
</tr>
</tbody>
</table>
</div>
<h3 id="detailed-notes%3A">Detailed Notes:</h3>
<ul>
<li>NVDA + Firefox: both tab and cursor navigation work from the start point, but nothing was announced on close.</li>
<li>NVDA + Chrome: tab works from the start point; scan mode is flaky, and seems to start from whatever is nearest the last (x, y) position of the dismissed focused element. Nothing is announced on close.</li>
<li>NVDA + Edge Chromium: tab works, but NVDA reads &quot;document&quot; when focus is lost.</li>
<li>Narrator + Edge (pre-Chromium): tab starts again from the top, though cursor navigation starts from where the hidden content used to be. Nothing is announced on close</li>
<li>Narrator + Edge Chromium: tab works, but Narrator reads &quot;document&quot; when focus is lost and cursor navigation starts over from the top of the page</li>
<li>JAWS with all Windows browsers: tab works, but the virtual cursor starts over from the top of the page. JAWS with Firefox reads &quot;frame&quot; when focus is lost, and was silent with other browsers.</li>
<li>VoiceOver + Safari on iOS: the VoiceOver cursor jumps somewhere weird and inconsistent (seems to track (x, y) position on screen like NVDA and Chrome), and immediately begins reading from that point. The example that handled focus works as expected.</li>
<li>VoiceOver + Safari on macOS: both tab and the VoiceOver cursor both start where they should, from where focus was lost.</li>
<li>Talkback on Android: the screen reader cursor jumps to the top of the page, and begins reading it from the start.</li>
<li>ZoomText (without a screen reader): When focus is lost, the screen does not re-center on the correct place (most noticeable with the dialog). It works correctly when focus is actively managed.</li>
</ul>
<p>As is (hopefully) clear, there is absolutely no consistency in how screen readers handle lost focus. At worst, the user gets no feedback about the change of context on close, and then the screen reader starts over from the top of the page. ZoomText (and potentially other assistive tech that wasn't tested) is also affected, with the screen failing to re-center somewhere useful to the user.</p>
<p>Scott O'hara also has support results for <a href="https://scottaohara.github.io/testing/skip-link/testing.html">testing skip link focus and virtual cursor</a>.</p>
<h2 id="solutions">Solutions</h2>
<p>The fix is easy: always manage focus when you remove the active element from the DOM!</p>
<p>Supplemental links:</p>
<ul>
<li><a href="https://html.spec.whatwg.org/multipage/interaction.html#sequential-focus-navigation-starting-point">https://html.spec.whatwg.org/multipage/interaction.html#sequential-focus-navigation-starting-point</a></li>
<li><a href="https://developers.google.com/web/updates/2016/03/focus-start-point">https://developers.google.com/web/updates/2016/03/focus-start-point</a></li>
</ul>
<hr>
<blockquote>
<p>sequential focus navigation starting point<br>
sequential focus navigation starting point<br>
sequential focus navigation starting point<br>
sequential foction navigatus starting point<br>
sequential focusing navigation start point<br>
sequential focal navigation startus point<br>
sequential fo-cat nappigation flop point</p>
</blockquote>
<img src="/writing/assets/cat-flop.jpg" alt="kitten flopped over, face down, sleeping">
    ]]></content>
  </entry>
	
  
  <entry>
    <title>What&#39;s in a name?</title>
    <link href="https://sarahmhigley.com/writing/whats-in-a-name/"/>
    <updated>2020-04-12T17:00:00-07:00</updated>
    <id>https://sarahmhigley.com/writing/whats-in-a-name/</id>
    <content type="html"><![CDATA[
      <p>Often when we talk about accessibility problems, we end up talking about different types of missing names: form fields without labels, images without <code>alt</code>s, icon buttons without readable text, and so on. More recently, a greater awareness of accessibility and an increase in the use of <a href="https://www.w3.org/TR/wai-aria-1.2/">ARIA attributes</a> has resulted in a sort of reverse naming problem: <code>&lt;div&gt;</code>s and <code>&lt;span&gt;</code>s with <code>aria-label</code>s, and links or buttons whose programmatic name has been manually defined to be more verbose than their visible text.</p>
<p>While an improperly added name is a step up from a missing one, they are both a result of not understanding when and how to give an element a name.</p>
<p><img src="/writing/assets/give-a-div-a-name.jpg" alt="An illustrated mouse with a cookie, with the text: if you give a div a name, it'll ask for a role to go with it"></p>
<h2 id="what-is-a-%22name%22%3F">What is a &quot;name&quot;?</h2>
<p>There are many different terms that are used to talk about a missing or incorrect accessible name, depending on context. For images, it can be &quot;alternative text&quot; or &quot;the <code>alt</code> attribute&quot;; for tables, &quot;caption&quot;; and for form fields, we usually talk about labels. Here's a non-comprehensive list of terms and concepts that all boil down to talking about names:</p>
<ul>
<li>labels, the <label> element, and associating labels with form fields</li>
<li>table captions</li>
<li>image alt text</li>
<li>the <code>&lt;legend&gt;</code> element</li>
<li>an SVG <code>&lt;title&gt;</code> element</li>
<li><code>aria-label</code> and <code>aria-labelledby</code></li>
</ul>
<p>The reason I'm using &quot;name&quot; or &quot;accessible name&quot; to refer to all of these different concepts is because although they differ in HTML, they all end up mapping to the &quot;name&quot; property (or equivalent) in accessibility APIs and the browser's internal accessibility tree. For example, this screenshot shows how an <code>&lt;img&gt;</code> element's alt attribute is represented in Microsoft Edge's accessibility dev tools:</p>
<figure>
  <img src="/writing/assets/edge-name-a11y.png" alt="A screenshot of a party parrot meme in a previous article, next to the dev tools pane showing computed name and role">
  <figcaption>The computed name that a browser will expose to accessibility APIs can be viewed in dev tools.</figcaption>
</figure>
<p>Most browsers will also let you view exactly where that computed name came from; in this case, the alt attribute:</p>
<figure>
  <img src="/writing/assets/edge-name-a11y-expanded.png" alt="the same party parrot screenshot, with the computed name in dev tools expanded to show the alt attribute defined underneath">
  <figcaption>This can be helpful if the accessible name is not what you think it should be.</figcaption>
</figure>
<p>If you wished to open up <a href="https://accessibilityinsights.io/docs/en/windows/overview">Accessibility Insights for Windows</a>, you would see the same string defined in the image node's Name property in the <a href="https://docs.microsoft.com/en-us/windows/win32/winauto/ui-automation-specification">underlying accessibility API</a>.</p>
<h2 id="what-needs-a-name%3F">What needs a name?</h2>
<p>Not every element can support an accessible name, and even among those that can, not every one should. For example, a <code>&lt;section&gt;</code> element can be named with <code>aria-label</code> or <code>aria-labelledby</code> but doing so will promote it to being a landmark, which isn't always desired. A list can also be named, though doing so is uncommon and not needed unless there's some context-specific reason for doing so. So, if some elements always need names, others may or may not benefit from a name, and others can't have them at all, how do you know which is which?</p>
<p>There are a few general categories of elements that should always be named:</p>
<ol>
<li>
<p><strong>Interactive elements</strong>:<br>
These include all form controls, links, buttons, and also complex interactive widgets like tabs, menus, listboxes, and so on.</p>
</li>
<li>
<p><strong>Other focusable elements</strong>:<br>
Although generally non-interactive elements should not be focusable, there are some exceptions like <a href="https://www.gatsbyjs.org/blog/2019-07-11-user-testing-accessible-client-routing/">client-side routing with focus management</a>, a modal dialog, or the target of a skip link. Anything that can receive keyboard focus, whether through tabbing or scripting, should have an accessible name.</p>
</li>
<li>
<p><strong>Charts and graphics</strong>:<br>
Meaningful images, graphs, canvas visuals, and other graphical content needs to be labelled with alternative text. Images and graphics that are not meaningful should be removed from the accessibility tree; with an <code>&lt;img&gt;</code> tag, this is done with an empty alt: <code>alt=&quot;&quot;</code>, and <code>aria-hidden=&quot;true&quot;</code> works for other elements.</p>
</li>
<li>
<p><strong>Landmarks and labelled form groups</strong>:<br>
Form groups include things like sets of checkboxes and radio buttons, or multiple related text inputs for something like a credit card. They should always have an accessible name that matches the visible group label. Traditionally this is done with the <code>&lt;fieldset&gt;</code> and <code>&lt;legend&gt;</code> elements, but can also be accomplished with <code>role=&quot;group&quot;</code> and <code>aria-label</code>/<code>aria-labelledby</code>.</p>
<p>Landmarks need an accessible name when there are multiple instances of the same type of landmark on a page, such as a main navigation region together with a supplementary navigation region. Generic landmarks (with <code>role=&quot;region&quot;</code>) always need an accessible name.</p>
</li>
</ol>
<p>There are multiple different WCAG criteria that cover failing to give an accessible name to an element that needs one. There's <a href="https://www.w3.org/WAI/WCAG21/Understanding/name-role-value.html">Name, Role, Value</a> for interactive controls lacking a name, <a href="https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html">Non-text content</a> for naming, well, non-text content, <a href="https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-in-context.html">Link Purpose (in context)</a> for links with missing or poorly written names, and the catch-all <a href="https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html">Info and Relationships</a> for any other scenario where meaning is implied by visual cues or context but not present programmatically.</p>
<h2 id="how-do-you-name-an-element%3F">How do you name an element?</h2>
<p>Contrary to what you may think, naming an element involves neither a birth certificate nor the HTML <code>name</code> attribute. The <code>name</code> attribute is never directly exposed to the user, and is used only when submitting forms. Birth certificates have thus far been ignored by spec authors as a potential method for naming controls, but perhaps when web UI becomes sentient and self-propagating, we'll need to revisit that.</p>
<p>Right now, there are four different types of ways an element can be assigned a name: from author, from content, from encapsulation, and from legend. The last two are highly specific to certain form elements:</p>
<p>Name from encapsulation, using the <code>&lt;label&gt;</code> element:</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    This text will be the checkbox input's name</span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span></code></pre>
<p>Name from legend, which sounds epic but ultimately only refers to <a href="https://html.spec.whatwg.org/multipage/form-elements.html#the-legend-element">the <code>&lt;legend&gt;</code> element</a>:</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>This text will name the fieldset element, as long as the legend is the first child<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token comment">&lt;!-- some form elements go here --></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span></span></code></pre>
<p>Most of the time when naming elements, you'll be using either a name from author, or name from content. Both of these techniques are likely familiar, even if the particular phrases &quot;name from author&quot; and &quot;name from content&quot; sound more like they belong in a dry spec somewhere than actual words actual people say to each other (which is accurate).</p>
<p>&quot;Name from content&quot; in its simplest form means an element's accessible name comes from its text content. Take the following example of a submit button that reads, because I am a creative person, &quot;Submit&quot;:</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span></code></pre>
<p>If you were to view that in a browser, you would see that the calculated name of the button is &quot;Submit&quot;, and that the source is the button's contents:</p>
<p><img src="/writing/assets/name-from-contents.png" alt="Edge's accessibility developer tools show the submit button's name is Submit, and that the name comes from its contents"></p>
<p>A button with text content is a simple example; it's also possible to have non-text content contribute to an element's accessible name. In the following example, a link contains both text and an image with alt text. In it, the image gets its name from the <code>alt</code> attribute, and the link is named by the combination of all plain text and other named elements within it:</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/twitter-icon.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Twitter.<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Your daily source of all current-events-related anxiety.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span></code></pre>
<figure style="max-width:450px">
  <img src="/writing/assets/twitter-link.png" alt="Visual rendering of a styled block link with an image above a short line of text">
  <figcaption>The accessible name of the link is "Twitter. Your daily source of all current-events-related anxiety"</figcaption>
</figure>
<p>The image's <code>alt</code> attribute is actually an example of a name from author, nested inside the link's name from content. &quot;Name from author&quot; refers to assigning a name to an element directly, either by passing a string to an attribute like <code>alt</code> or <code>aria-label</code>, or through the use of an associated labeling element, like <code>&lt;label for=&quot;input-id&quot;&gt;</code>.</p>
<p>Some examples of defining a name from author include:</p>
<ul>
<li>aria-label</li>
<li>aria-labelledby</li>
<li>the <code>&lt;label&gt;</code> element, associated with an <code>&lt;input&gt;</code> by <code>id</code></li>
<li>the <code>alt</code> attribute on an <code>&lt;img&gt;</code></li>
<li>the <code>&lt;caption&gt;</code> element in a <code>&lt;table&gt;</code></li>
</ul>
<p>Some elements with roles such as <code>table</code> and <code>list</code>, or landmark roles like <code>navigation</code> and <code>main</code>, only support name from author. If these elements are given a name through <code>aria-label</code> or <code>aria-labelledby</code>, screen readers will generally read that name when the user first enters the element, and then go on to read the element's content. This is because the content exists separately from the accessible name, so both the content and the name (if provided) are read separately.</p>
<p>In contrast, roles that support both name from author and name from content will only ever read one or the other. If a name from author is provided, the element's content will be entirely ignored. So if we were to consider the following extremely realistic example snippet:</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Cats are the best<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Dogs are the best<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span></code></pre>
<p>The resulting button would have an accessible name of &quot;Cats are the best&quot;, and someone using a screen reader would not encounter the string &quot;Dogs are the best&quot;. A name from author will always override name from content, when both are supported.</p>
<p>There is an <a href="https://www.w3.org/TR/accname-1.1/#mapping_additional_nd_te">entire spec</a> governing the full set of steps that browsers must take to determine the accessible name and description for any nameable or describeable element. It is arcane and complex, and can generally be ignored by web developers. Here is a reduced summary of accessible name methods, ordered from what will override everything else (1) to what will only be used if no other methods are present (4):</p>
<ol>
<li>aria-labelledby</li>
<li>aria-label</li>
<li>Native HTML methods: alt, the <code>&lt;label&gt;</code> element, text content</li>
<li>Fallback attributes: title and placeholder</li>
</ol>
<p>Ideally, a single control will only be named using one method, so the exact way browsers calculate an accessible name should not matter much (unless you work on browser accessibility, in which case, thank you). Generally when in doubt, consult the <a href="https://sarahmhigley.com/writing/roles-and-relationships/#the-accessibility-tree%3A-a-quick-definition">accessibility information in your browser's developer tools</a>. That will tell you both the calculated accessible name, and where it's coming from.</p>
<p>While there are a good number of possible ways to name a control, not all options are created equal. Rather than go into the nuances of why to choose a <code>&lt;label&gt;</code> element over <code>aria-label</code> here, I'd rather link to the article Adrian Roselli has already written on his <a href="https://adrianroselli.com/2020/01/my-priority-of-methods-for-labeling-a-control.html">priority of methods for labeling a control</a>. The TL;DR is:</p>
<ol>
<li>Native HTML techniques (the <code>&lt;label&gt;</code> element, text content, <code>alt</code>, etc.)</li>
<li><code>aria-labelledby</code></li>
<li>visually hidden text content</li>
<li><code>aria-label</code></li>
</ol>
<p>His article goes into more of the reasons around why some methods are better than others, which I won't duplicate.</p>
<h2 id="which-elements-and-roles-can-be-named%3F">Which elements and roles can be named?</h2>
<p>Any given role that an element can have falls into one of three naming possibilities: either it must have a name, it can optionally be named, or it cannot be named at all . Throw in the different possibilities for naming (from author, from content, from encapsulation, and from legend), and it gets to be a bit too much to keep track of.</p>
<p>Luckily, the ARIA spec has a section listing every single role that can be named, broken down by the naming method. Roles that require names are designated with &quot;(name required)&quot;. Here are the sections where you can find the naming information:</p>
<ul>
<li><a href="https://w3c.github.io/aria/#namefromauthor">Name from author</a></li>
<li><a href="https://w3c.github.io/aria/#namefromcontent">Name from content</a></li>
<li><a href="https://w3c.github.io/aria/#namefromencapsulation">Name from encapsulation</a></li>
<li><a href="https://w3c.github.io/aria/#namefromlegend">Name from legend</a></li>
<li><a href="https://w3c.github.io/aria/#namefromprohibited">Name prohibited</a></li>
</ul>
<p>The ARIA spec lists these only by role and not by element, but if you're not sure which role an element has by default, you can look it up in the <a href="https://w3c.github.io/html-aam/#html-element-role-mappings">HTML AAM spec</a>. If an explicit <code>role</code> attribute is present, it will override the default role mapping in HTML AAM. For example:</p>
<ul>
<li><code>&lt;button&gt;</code>: look up the <code>button</code> role</li>
<li><code>&lt;button role=&quot;tab&quot;&gt;</code>: look up the <code>tab</code> role</li>
</ul>
<p>While the most common problem is for one of the &quot;name required&quot; roles to lack an accessible name, sometimes the reverse occurs and an element that cannot be named -- e.g. a <code>&lt;div&gt;</code> or <code>&lt;span&gt;</code> -- is given an <code>aria-label</code> or <code>aria-labelledby</code>. A couple cases I've seen this happen include a <code>&lt;span aria-label=&quot;some text&quot;&gt;</code> wrapping a font icon, or putting an <code>aria-label</code> on a div that wraps a <a href="https://inclusive-components.design/cards/">card pattern</a>.</p>
<p>Both of these come from good intentions and an active attempt to create better accessibility, and a few extra attempts at naming unnameable elements won't cause any negative side effects. The main danger is that the illusion of having given something an accessible name will obscure underlying issues. Usually the fix is to revisit which elements and roles were used, or to reconsider what really needs a name.</p>
<p>In the case of the font icon example, the best solution would likely be to treat it as an image, which can be given a name:</p>
<pre><code>&lt;span aria-label=&quot;name of icon&quot; role=&quot;img&quot;&gt;&amp;#xe900;&lt;/span&gt;
</code></pre>
<p>A generic wrapping <code>&lt;div&gt;</code> for something like a card pattern is more complex. Does that section of content really need its own name, separate from the content within it? If this grouping of content is important enough to be named, then it should probably be exposed as some sort of group. Would an existing HTML pattern like a list fit your use case? Is there another element or role that would fit better?</p>
<p>A card pattern could be exposed as a list item within a list (as Heydon does in his <a href="https://inclusive-components.design/cards/">card pattern</a>), or perhaps as an <a href="https://w3c.github.io/aria/#article">article role</a>. Both those roles (<code>listitem</code> and <code>article</code>) can be given a name from author, but that doesn't mean they need one. To decide whether a name-optional element would benefit from a name in this case as in others, the best thing to do is to consider how a programmatic name will translate into actual user experience. And, of course, to then check those assumptions with people who rely on assistive technologies.</p>
<h2 id="how-is-the-accessible-name-used-by-assistive-tech%3F">How is the accessible name used by assistive tech?</h2>
<p>The programmatically exposed accessible name is primarily used by screen readers (including screen readers with braille displays) and voice control software. Voice control software can vary a lot in whether it uses the accessible name, text content, or some combination of the two. It is not presented directly to the user, but consumed under the hood when a user issues a command like &quot;press submit button.&quot;</p>
<p>Screen readers do present the accessible name directly to the user, in a number of different ways depending on the mode of interaction and the type of element that is named.</p>
<p>The most straightforward way a screen reader exposes the accessible name is when the user interacts directly with the named element. This can come in the form of tabbing to a focusable element like a form field, link, or button, which is often the most beginner-friendly way of using a screen reader. Another way to directly interact with an element is to use the screen reader's virtual cursor to move through a page, using sets of commands specific to each screen reader. This will present either the accessible name of a nameable control (heading, link, button, etc.), or a text string in the case of unnameable elements (divs, paragraphs, and so on).</p>
<p>There is another type of nameable element that I'm going to call container roles, which include landmark regions, forms, lists, dialogs, tables, tabpanels, and generic groups. Usually when a screen reader user navigates the page, they will enter and exit these elements without interacting with them directly (emphasis on &quot;usually&quot;). If named, the name will generally be read when the screen reader first enters the container role, depending on the screen reader's support for that role (always test).</p>
<p>One last way of consuming an accessible name is in an elements list. With an elements list, a screen reader user can review all elements of a particular type (e.g. links) out of context. Here's an example of what that looks like in NVDA:</p>
<p><img src="/writing/assets/nvda-links-list.png" alt="Screenshot of NVDA's links list on an A11y Project article"></p>
<p>The elements list is one example of when it is important to write unique, descriptive accessible names. Multiple duplicate buttons under different headings, or link names that only make sense in context will be confusing and unhelpful in the elements list.</p>
<h2 id="how-do-you-write-a-good-name%3F">How do you write a good name?</h2>
<p>A developer's blog (or at least this developer's blog) is probably not the best place to look for advice on the writing process. I personally have enough trouble trying to name variables in code that no one else will ever read. Instead, try this page of <a href="https://developer.apple.com/videos/play/wwdc2019/254/">writing tips from the Web Accessibility Initiative (WAI)</a>, or this <a href="https://developer.apple.com/videos/play/wwdc2019/254/">video on writing good labels</a> from Jordyn Castor at Apple.</p>
<p>Instead, let's go over some accessibility-specific tips to writing a good name:</p>
<ul>
<li><strong>Avoid including the type of control in the name</strong><br>
The type of control will already be communicated by screen readers. For example, naming a submit button &quot;Submit button&quot; will result in an announcement along the lines of &quot;Submit button button&quot;.</li>
<li><strong>Make names unique</strong><br>
Unique names help screen reader users scanning controls directly without needing to examine surrounding context, and they also help sighted users by reducing the cognitive load required to determine the purpose of a control. Visually scanning an online store's buttons is easier when each has a unique name like &quot;shop computers&quot;, &quot;shop laptops&quot;, etc. than why all of them read &quot;shop now&quot;. The exception is when multiple controls do the exact same thing. For example, there are two links named &quot;card pattern&quot; on this page, but they both go to the same URL.</li>
<li><strong>Make names easy to skim</strong><br>
Concise, descriptive names are easier to quickly skim, and reduce the time required to process and comprehend each individual control. This is particularly important when many similar named items appear grouped together, such as row headers in a table, or options in a listbox. If all the names share a common string, such as dates in a month, putting the most unique, relevant information first will make them faster to skim. So &quot;13 April 2020&quot; rather than &quot;April 13, 2020&quot;.</li>
</ul>
<h3 id="when-should-you-override-the-visual-name%3F">When should you override the visual name?</h3>
<p>Sometimes the desire to provide a unique, descriptive name to screen readers can conflict with an existing design, or others' opinions that are not entirely based in a desire for accessibility. In those cases, it can be tempting to accept less-than-ideal visual labels while modifying the accessible name behind the scenes. For example, a developer tasked with improving the accessibility of an online storefront with 10 &quot;Shop now&quot; links ends up putting a more descriptive <code>aria-label</code> on each while keeping the visual text the same:</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token comment">&lt;!-- Don't do this --></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/shop/dresses<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Shop Dresses<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Shop Now<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span></code></pre>
<p>This is not ideal for a number of reasons, even though on first consideration it seems to improve the screen reader experience without the uncomfortable messiness of revisiting design. Unfortunately, creating separate visual and programmatic names causes its own new set of problems.</p>
<p>To start with, not all screen reader users are blind. People with low vision who use some form of magnification or high contrast might use a screen reader as a supplement. Others with no visual impairments might prefer to listen to information rather than look at it for cognitive or sensory reasons. It is not all that unusual for someone to listen to the programmatic name with a screen reader while also looking at the visual label. If those two diverge, it could be jarring and cause confusion. Even fully blind screen reader users sometimes need to communicate with tech support or sighted colleagues, and separate content can make that difficult.</p>
<p>Different names can also cause problems for someone using a voice control software like Dragon Naturally Speaking. A Dragon user confronted with 10 &quot;shop now&quot; links would not be able to take advantage of the unique but invisible &quot;shop dresses&quot; programmatic name. In WCAG 2.1 there is a new criterion, <a href="https://www.w3.org/WAI/standards-guidelines/wcag/new-in-21/#253-label-in-name-a">Label in Name</a> specifically for improving this experience.</p>
<p>All this doesn't mean that there are never good reasons to create separate programmatic and visual names. In cases where the visual name is an icon or graphic, or the visual context is conveying information that cannot be easily captured as a text label, a custom programmatic name might make sense.</p>
<p>A good time to use hidden text or an <code>aria-label</code> is when you have no visible text labeling an element, but where a visual user gets that information through context. One concrete example is for landmark regions of the page: you might have a main navigation menu at the visual top of the page, and a secondary sidebar navigation for something like content categories. The position and visual style of each navigation tells the user its importance, adding short accessible names like &quot;main&quot; and &quot;category&quot; communicate that same information programmatically. Some other examples of good use cases for hidden text, an <code>aria-label</code>, or other non-visual label include:</p>
<ul>
<li>Alt text for images</li>
<li>Naming an icon button</li>
<li>Naming a container widget like a dialog, feed, tabpanel, or list. If a heading or other text exists that visually labels the container, <code>aria-labelledby</code> is a better choice than <code>aria-label</code></li>
</ul>
<p>Practical accessibility doesn't always match ideal accessibility, and there will almost certainly be times when a design or content change just isn't happening, for whatever reason. In those cases, improving the accessible name is better than nothing. Just take care to include the visual label within the accessible name (ideally at the start), and try to write something that will not cause confusion when used together with the visual text.</p>
<h2 id="tooltips%2C-placeholders%2C-names%2C-and-duplicate-announcements">Tooltips, placeholders, names, and duplicate announcements</h2>
<p>A while back, I wrote a ~rant~ small article about some of the accessibility challenges of tooltips. One section dealt with whether the tooltip should form <a href="/writing/tooltips-in-wcag-21/#semantics">the name or the description</a> of the control it is attached to. Essentially, sometimes a tooltip will function visually as the accessible name (common with icon buttons) and sometimes it will provide additional descriptive text. The danger here is that using a <code>title</code> attribute to provide a tooltip that is the same as the control's accessible name can create <a href="https://www.scottohara.me/testing/title-attr/results.html">duplicate announcements</a>. Sometimes. It depends.</p>
<p>The same inconsistent double announcements exist with a name and placeholder, although the specifics of which screen readers and browsers double up may differ. (Full disclosure: I only tested in a few screen readers to verify inconsistency, and testing results go out of date quickly in any case). Both the <code>title</code> and <code>placeholder</code> attributes will be used as fallback sources for the accessible name, so using them that way can be a tempting way to resolve the duplicate announcement problem. However, relying on either <code>title</code> or <code>placeholder</code> as the label for a control causes many, many accessibility problems that go beyond simple programmatic support.</p>
<p>Seriously, don't do it:</p>
<ul>
<li><a href="https://www.24a11y.com/2017/the-trials-and-tribulations-of-the-title-attribute/">The Trials and Tribulations of the Title Attribute</a> by Scott O'Hara</li>
<li><a href="https://www.mediacurrent.com/blog/dont-rely-title-attribute-accessibility-seo/">Don't Rely on the Title Attribute for Accessibility</a> by the mediacurrent team</li>
<li><a href="https://developer.paciellogroup.com/blog/2013/01/using-the-html-title-attribute-updated/">Using the HTML title attribute – updated March 2020</a> by Steve Faulkner</li>
<li><a href="https://www.smashingmagazine.com/2018/06/placeholder-attribute/">Don’t Use The Placeholder Attribute</a> by Eric Bailey</li>
<li><a href="https://a11yproject.com/posts/placeholder-input-elements/">How-to: Use placeholder attributes</a> from the A11y Project</li>
<li><a href="https://codepen.io/stevef/post/placeholder-the-piss-take-label">placeholder - the piss-take label</a> by Steve Faulkner</li>
<li><a href="https://www.w3.org/WAI/GL/low-vision-a11y-tf/wiki/Placeholder_Research">Placeholder research</a> from the Web Accessibility Initiative's low vision accessibility task force</li>
<li><a href="https://www.nngroup.com/articles/form-design-placeholders/">Placeholders in Form Fields Are Harmful</a> by Kate Sherwin</li>
</ul>
<h2 id="further-reading">Further reading</h2>
<ul>
<li><a href="https://adrianroselli.com/2020/01/my-priority-of-methods-for-labeling-a-control.html">Priority of methods for labeling a control</a> from Adrian Roselli</li>
<li><a href="https://w3c.github.io/accname/">Accessible name and description comuptation</a></li>
</ul>

    ]]></content>
  </entry>
	
</feed>